const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');
const fs = require('fs');
const path = require('path');

//
const MAP_CATEGORIES = {
    'Main': [
        '–ö–≤–∞–¥—Ä–∏–∫–∏', '–õ–ù–°', '–°–∞–º–æ–ª–µ—Ç—ã', '–°–≤–∞–ª–∫–∞', '–ë–ª–∞–¥—Å—ã', '–ë–æ–ª—å—à–∏–µ –∫–æ–Ω—Ç—ã', '–ì—Ä–µ–π–ø—Å–∏–¥', '–î–∏–Ω–æ–∑–∞–≤—Ä–∏–∫', '–ó–µ—Ä–Ω–æ', '–ö–∞–π-–ü–µ—Ä–∏–∫–æ', '–ú–∞–ª—ã–µ –ö–æ–Ω—Ç—ã', '–ú–µ–∫—Å—ã', '–ú–∏—Ä–æ—Ä', '–ù–µ—Ñ—Ç—å', '–°–¥–∞—á–∞ –º—è—Å–∞', '–°—Ç–∞—Ä–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞', '–°—Ç–µ–±', '–°—Ç—Ä–æ–π–∫–∞ 1', '–°—Ç—Ä–æ–π–∫–∞ 2', '–¢–®–ö–ê', '–§–µ—Ä–º–∞ –Ω–µ –º–µ–∫—Å—ã',
    ]
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
function loadServerConfigs() {
    try {
        const configPath = path.resolve(__dirname, '..', 'serverConfigs.json');
        
        if (!fs.existsSync(configPath)) {
            console.log('–§–∞–π–ª serverConfigs.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            const defaultConfig = {};
            fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
            return defaultConfig;
        }
        
        const data = fs.readFileSync(configPath, 'utf8');
        let configs;
        try {
            configs = JSON.parse(data);
        } catch (parseError) {
            console.error('–§–∞–π–ª serverConfigs.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            const defaultConfig = {};
            fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
            return defaultConfig;
        }
        
        if (typeof configs !== 'object' || configs === null) {
            console.error('–§–∞–π–ª serverConfigs.json —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            const defaultConfig = {};
            fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
            return defaultConfig;
        }
        
        return configs;
    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        try {
            const configPath = path.resolve(__dirname, '..', 'serverConfigs.json');
            const defaultConfig = {};
            fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
            return defaultConfig;
        } catch (createError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', createError);
            return {};
        }
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
function saveServerConfigs(configs) {
    try {
        const configPath = path.resolve(__dirname, '..', 'serverConfigs.json');
        
        if (fs.existsSync(configPath)) {
            const backupPath = configPath + '.backup';
            fs.copyFileSync(configPath, backupPath);
        }
        
        fs.writeFileSync(configPath, JSON.stringify(configs, null, 2));
        
        const backupPath = configPath + '.backup';
        if (fs.existsSync(backupPath)) {
            fs.unlinkSync(backupPath);
        }
        
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
        try {
            const configPath = path.resolve(__dirname, '..', 'serverConfigs.json');
            const backupPath = configPath + '.backup';
            if (fs.existsSync(backupPath)) {
                fs.copyFileSync(backupPath, configPath);
                console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            }
        } catch (restoreError) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', restoreError);
        }
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
function hasAdminPermissions(member) {
    return member.permissions.has(PermissionFlagsBits.Administrator) || 
           member.permissions.has(PermissionFlagsBits.ManageGuild) ||
           member.roles.cache.some(role => role.permissions.has(PermissionFlagsBits.Administrator));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª—é–±–æ–π —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
function hasAnyRole(member, roleIds) {
    if (!Array.isArray(roleIds) || roleIds.length === 0) return false;
    return roleIds.some(roleId => member.roles.cache.has(roleId));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
function getServerMembers(guild, allowedRoleIds) {
    const members = [];
    guild.members.cache.forEach(member => {
        if (!member.user.bot) {
            const hasAllowedRole = member.roles.cache.some(role => 
                allowedRoleIds.includes(role.id)
            );
            if (hasAllowedRole) {
                members.push({
                    label: member.displayName || member.user.username,
                    value: member.id,
                    description: `@${member.user.username}`,
                    emoji: 'üë§'
                });
            }
        }
    });
    members.sort((a, b) => a.label.localeCompare(b.label));
    return members.slice(0, 25);
}

// –ö–æ–º–∞–Ω–¥–∞ /–≤—Å - –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const vsCommand = {
    data: new SlashCommandBuilder()
        .setName('–≤—Å')
        .setDescription('–û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ'),
    
    async execute(interaction, client) {
        const guildId = interaction.guildId;
        const configs = loadServerConfigs();
        const serverConfig = configs[guildId];

        if (!serverConfig || !serverConfig.gameResults) {
            await interaction.reply({
                content: '‚ùå –ú–æ–¥—É–ª—å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/–≤—Å_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.',
                flags: 64
            });
            return;
        }

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ —Ä–æ–ª–∏-¬´–≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª
        const submitterRoleIds = serverConfig.gameResults.submitterRoleIds || serverConfig.gameResults.allowedRoleIds || [];
        if (!hasAnyRole(interaction.member, submitterRoleIds)) {
            await interaction.reply({
                content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                flags: 64
            });
            return;
        }

        const categorySelect = new StringSelectMenuBuilder()
            .setCustomId('category_select')
            .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç')
            .addOptions(
                Object.keys(MAP_CATEGORIES).map((category) => ({
                    label: category,
                    value: category,
                    description: `${MAP_CATEGORIES[category].length} –∫–∞—Ä—Ç`
                }))
            );

        const categoryRow = new ActionRowBuilder().addComponents(categorySelect);

        await interaction.reply({
            content: 'üéÆ **–û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:',
            components: [categoryRow],
            flags: 64
        });
    },

    async handleComponent(interaction, client) {
        if (interaction.customId === 'category_select') {
            const selectedCategory = interaction.values[0];
            const maps = MAP_CATEGORIES[selectedCategory];
            
            const mapSelect = new StringSelectMenuBuilder()
                .setCustomId('map_select')
                .setPlaceholder(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory}"`)
                .addOptions(
                    maps.map((map, index) => ({
                        label: map,
                        value: `${selectedCategory}:${map}`,
                        description: `–ö–∞—Ä—Ç–∞ ${index + 1}`
                    }))
                );

            const mapRow = new ActionRowBuilder().addComponents(mapSelect);

            await interaction.update({
                content: `üó∫Ô∏è **–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** ${selectedCategory}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É:`,
                components: [mapRow]
            });
            return true;
        }

        if (interaction.customId === 'map_select') {
            const [category, selectedMap] = interaction.values[0].split(':');
            
            const winButton = new ButtonBuilder()
                .setCustomId(`result_win_${selectedMap}`)
                .setLabel('üèÜ –ü–æ–±–µ–¥–∞')
                .setStyle(ButtonStyle.Success);

            const loseButton = new ButtonBuilder()
                .setCustomId(`result_lose_${selectedMap}`)
                .setLabel('üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ')
                .setStyle(ButtonStyle.Danger);

            const resultRow = new ActionRowBuilder().addComponents(winButton, loseButton);

            await interaction.update({
                content: `üéØ **–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞:** ${selectedMap} (${category})\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:`,
                components: [resultRow]
            });
            return true;
        }

        if (interaction.customId.startsWith('result_')) {
            const [, result, map] = interaction.customId.split('_');
            
            const guildId = interaction.guildId;
            const configs = loadServerConfigs();
            const serverConfig = configs[guildId];

            if (!serverConfig || !serverConfig.gameResults) {
                await interaction.update({
                    content: '‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    components: []
                });
                return true;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            const submitterRoleIds = serverConfig.gameResults.submitterRoleIds || serverConfig.gameResults.allowedRoleIds || [];
            if (!hasAnyRole(interaction.member, submitterRoleIds)) {
                await interaction.reply({
                    content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    flags: 64
                });
                return true;
            }

            // –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç—Ä–æ–∏–º –ø–æ —Ä–æ–ª—è–º-—É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            const participantRoleIds = serverConfig.gameResults.participantRoleIds || serverConfig.gameResults.allowedRoleIds || [];
            const members = getServerMembers(interaction.guild, participantRoleIds);
            
            if (members.length === 0) {
                await interaction.update({
                    content: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π.',
                    components: []
                });
                return true;
            }

            const playersSelect = new StringSelectMenuBuilder()
                .setCustomId(`players_select_${result}_${map}`)
                .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)')
                .setMinValues(1)
                .setMaxValues(Math.min(members.length, 10))
                .addOptions(members);

            const playersRow = new ActionRowBuilder().addComponents(playersSelect);

            await interaction.update({
                content: `üéÆ **–í—ã–±—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** ${result === 'win' ? 'üèÜ –ü–æ–±–µ–¥–∞' : 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n**–ö–∞—Ä—Ç–∞:** ${map}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ –∏–≥—Ä–µ:`,
                components: [playersRow]
            });
            return true;
        }

        if (interaction.customId.startsWith('players_select_')) {
            const [, , result, map] = interaction.customId.split('_');
            const selectedPlayerIds = interaction.values;
            
            if (selectedPlayerIds.length === 0) {
                await interaction.update({
                    content: '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.',
                    components: []
                });
                return true;
            }

            const guildId = interaction.guildId;
            const configs = loadServerConfigs();
            const serverConfig = configs[guildId];

            if (!serverConfig || !serverConfig.gameResults) {
                await interaction.update({
                    content: '‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    components: []
                });
                return true;
            }

            try {
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                const submitterRoleIds = serverConfig.gameResults.submitterRoleIds || serverConfig.gameResults.allowedRoleIds || [];
                if (!hasAnyRole(interaction.member, submitterRoleIds)) {
                    await interaction.reply({
                        content: '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                        flags: 64
                    });
                    return true;
                }

                const channel = await client.channels.fetch(serverConfig.gameResults.channelId);
                if (!channel) {
                    await interaction.update({
                        content: '‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                        components: []
                    });
                    return true;
                }

                const players = selectedPlayerIds.map(id => {
                    const member = interaction.guild.members.cache.get(id);
                    return member ? member.displayName || member.user.username : `ID: ${id}`;
                });

                const embed = new EmbedBuilder()
                    .setColor(result === 'win' ? '#00ff00' : '#ff0000')
                    .setTitle(`üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ ${map}`)
                    .setDescription(`**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${result === 'win' ? 'üèÜ –ü–æ–±–µ–¥–∞' : 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}`)
                    .addFields(
                        { name: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', value: players.map(p => `‚Ä¢ ${p}`).join('\n'), inline: false },
                        { name: 'üó∫Ô∏è –ö–∞—Ä—Ç–∞', value: map, inline: true },
                        { name: 'üìÖ –î–∞—Ç–∞', value: new Date().toLocaleString('ru-RU'), inline: true },
                        { name: 'üìù –û—Ç—á–µ—Ç —Å–æ—Å—Ç–∞–≤–∏–ª', value: interaction.user.toString(), inline: true }
                    )
                    .setImage(result === 'win' ? serverConfig.gameResults.winPhotoUrl : serverConfig.gameResults.losePhotoUrl)
                    .setFooter({ text: '–û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–≥—Ä—ã' })
                    .setTimestamp();

                await channel.send({ embeds: [embed] });

                await interaction.update({
                    content: `‚úÖ **–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!**\n\n**–ö–∞—Ä—Ç–∞:** ${map}\n**–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${result === 'win' ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'}\n**–ò–≥—Ä–æ–∫–∏:** ${players.length}\n**–ö–∞–Ω–∞–ª:** ${channel.toString()}`,
                    components: []
                });

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:', error);
                await interaction.update({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    components: []
                });
            }
            return true;
        }

        return false;
    }
};

// –ö–æ–º–∞–Ω–¥–∞ /–≤—Å_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è
const vsSetupCommand = {
    data: new SlashCommandBuilder()
        .setName('–≤—Å_–Ω–∞—Å—Ç—Ä–æ–π–∫–∞')
        .setDescription('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)')
        .addChannelOption(option =>
            option.setName('–∫–∞–Ω–∞–ª')
                .setDescription('–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('—Ä–æ–ª–∏_–≤–Ω–æ—Å–∏—Ç—å')
                .setDescription('ID —Ä–æ–ª–µ–π, –∫—Ç–æ –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('—Ä–æ–ª–∏_—É—á–∞—Å—Ç–Ω–∏–∫–∏')
                .setDescription('ID —Ä–æ–ª–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('—Ñ–æ—Ç–æ_–ø–æ–±–µ–¥—ã')
                .setDescription('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–±–µ–¥—ã')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('—Ñ–æ—Ç–æ_–ø–æ—Ä–∞–∂–µ–Ω–∏—è')
                .setDescription('–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è')
                .setRequired(true)),
    
    async execute(interaction, client) {
        if (!hasAdminPermissions(interaction.member)) {
            await interaction.reply({
                content: '‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.',
                flags: 64
            });
            return;
        }

        const channel = interaction.options.getChannel('–∫–∞–Ω–∞–ª');
        const submitterRolesText = interaction.options.getString('—Ä–æ–ª–∏_–≤–Ω–æ—Å–∏—Ç—å');
        const participantRolesText = interaction.options.getString('—Ä–æ–ª–∏_—É—á–∞—Å—Ç–Ω–∏–∫–∏');
        const winPhotoUrl = interaction.options.getString('—Ñ–æ—Ç–æ_–ø–æ–±–µ–¥—ã');
        const losePhotoUrl = interaction.options.getString('—Ñ–æ—Ç–æ_–ø–æ—Ä–∞–∂–µ–Ω–∏—è');

        if (!winPhotoUrl.startsWith('http') || !losePhotoUrl.startsWith('http')) {
            await interaction.reply({
                content: '‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://',
                flags: 64
            });
            return;
        }

        const submitterRoleIds = submitterRolesText.split(',').map(id => id.trim()).filter(id => /^\d+$/.test(id));
        const participantRoleIds = participantRolesText.split(',').map(id => id.trim()).filter(id => /^\d+$/.test(id));

        if (submitterRoleIds.length === 0 || participantRoleIds.length === 0) {
            await interaction.reply({
                content: '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Ä–æ–ª–µ–π –¥–ª—è –≤–Ω–æ—Å—è—â–∏—Ö –¥–∞–Ω–Ω—ã–µ –∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).',
                flags: 64
            });
            return;
        }

        const validSubmitterRoles = [];
        const invalidSubmitterRoleIds = [];
        for (const roleId of submitterRoleIds) {
            try {
                const role = await interaction.guild.roles.fetch(roleId);
                if (role) validSubmitterRoles.push(role); else invalidSubmitterRoleIds.push(roleId);
            } catch (_) {
                invalidSubmitterRoleIds.push(roleId);
            }
        }

        const validParticipantRoles = [];
        const invalidParticipantRoleIds = [];
        for (const roleId of participantRoleIds) {
            try {
                const role = await interaction.guild.roles.fetch(roleId);
                if (role) validParticipantRoles.push(role); else invalidParticipantRoleIds.push(roleId);
            } catch (_) {
                invalidParticipantRoleIds.push(roleId);
            }
        }

        if (validSubmitterRoles.length === 0) {
            await interaction.reply({
                content: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Ä–æ–ª–∏, –∫—Ç–æ –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.',
                flags: 64
            });
            return;
        }

        if (validParticipantRoles.length === 0) {
            await interaction.reply({
                content: '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Ä–æ–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.',
                flags: 64
            });
            return;
        }

        if (invalidSubmitterRoleIds.length > 0 || invalidParticipantRoleIds.length > 0) {
            const parts = [];
            if (invalidSubmitterRoleIds.length > 0) parts.push(`—Ä–æ–ª—å –≤–Ω–æ—Å—è—â–∏—Ö –¥–∞–Ω–Ω—ã–µ: ${invalidSubmitterRoleIds.join(', ')}`);
            if (invalidParticipantRoleIds.length > 0) parts.push(`—Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${invalidParticipantRoleIds.join(', ')}`);
            await interaction.reply({
                content: `‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–æ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (${parts.join('; ')}).\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏.`,
                flags: 64
            });
        }

        try {
            const guildId = interaction.guildId;
            const configs = loadServerConfigs();
            
            if (!configs[guildId]) {
                configs[guildId] = {};
            }

            configs[guildId].gameResults = {
                channelId: channel.id,
                submitterRoleIds: validSubmitterRoles.map(role => role.id),
                participantRoleIds: validParticipantRoles.map(role => role.id),
                winPhotoUrl: winPhotoUrl,
                losePhotoUrl: losePhotoUrl
            };

            if (saveServerConfigs(configs)) {
                const embed = new EmbedBuilder()
                    .setColor('#00ff00')
                    .setTitle('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                    .addFields(
                        { name: 'üì∫ –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤', value: channel.toString(), inline: true },
                        { name: '‚úçÔ∏è –†–æ–ª–∏, –∫—Ç–æ –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å', value: validSubmitterRoles.map(r => r.toString()).join(', '), inline: false },
                        { name: 'üë• –†–æ–ª–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', value: validParticipantRoles.map(r => r.toString()).join(', '), inline: false },
                        { name: 'üèÜ –§–æ—Ç–æ –ø–æ–±–µ–¥—ã', value: winPhotoUrl, inline: true },
                        { name: 'üíÄ –§–æ—Ç–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è', value: losePhotoUrl, inline: true }
                    )
                    .setDescription('–¢–µ–ø–µ—Ä—å –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/–≤—Å` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä.')
                    .setTimestamp();

                await interaction.reply({ embeds: [embed], flags: 64 });
            } else {
                await interaction.reply({
                    content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    flags: 64
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥—É–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏:', error);
            await interaction.reply({
                content: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–æ–¥—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                flags: 64
            });
        }
    }
};

module.exports = {
    commands: [vsCommand, vsSetupCommand]
};

